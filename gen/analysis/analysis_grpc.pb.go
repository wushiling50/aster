// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: idl/analysis.proto

package analysis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Analysis_DelLanguage_FullMethodName    = "/analysis.analysis/DelLanguage"
	Analysis_DelNation_FullMethodName      = "/analysis.analysis/DelNation"
	Analysis_DelScore_FullMethodName       = "/analysis.analysis/DelScore"
	Analysis_DelSummary_FullMethodName     = "/analysis.analysis/DelSummary"
	Analysis_UpdateLanguage_FullMethodName = "/analysis.analysis/UpdateLanguage"
	Analysis_UpdateNation_FullMethodName   = "/analysis.analysis/UpdateNation"
	Analysis_UpdateScore_FullMethodName    = "/analysis.analysis/UpdateScore"
	Analysis_UpdateSummary_FullMethodName  = "/analysis.analysis/UpdateSummary"
	Analysis_GetLanguages_FullMethodName   = "/analysis.analysis/GetLanguages"
	Analysis_GetNation_FullMethodName      = "/analysis.analysis/GetNation"
	Analysis_GetScore_FullMethodName       = "/analysis.analysis/GetScore"
	Analysis_GetSummary_FullMethodName     = "/analysis.analysis/GetSummary"
)

// AnalysisClient is the client API for Analysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisClient interface {
	DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelNation(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelScore(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdateNation(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdateScore(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error)
	GetNation(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetNationResp, error)
	GetScore(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetScoreResp, error)
	GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error)
}

type analysisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisClient(cc grpc.ClientConnInterface) AnalysisClient {
	return &analysisClient{cc}
}

func (c *analysisClient) DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelNation(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelNation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelScore(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateNation(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateNation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateScore(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error) {
	out := new(GetLanguagesResp)
	err := c.cc.Invoke(ctx, Analysis_GetLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetNation(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetNationResp, error) {
	out := new(GetNationResp)
	err := c.cc.Invoke(ctx, Analysis_GetNation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetScore(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetScoreResp, error) {
	out := new(GetScoreResp)
	err := c.cc.Invoke(ctx, Analysis_GetScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error) {
	out := new(GetSummaryResp)
	err := c.cc.Invoke(ctx, Analysis_GetSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServer is the server API for Analysis service.
// All implementations must embed UnimplementedAnalysisServer
// for forward compatibility
type AnalysisServer interface {
	DelLanguage(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelNation(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelScore(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelSummary(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	UpdateLanguage(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdateNation(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdateScore(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdateSummary(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	GetLanguages(context.Context, *GetAnalysisReq) (*GetLanguagesResp, error)
	GetNation(context.Context, *GetAnalysisReq) (*GetNationResp, error)
	GetScore(context.Context, *GetAnalysisReq) (*GetScoreResp, error)
	GetSummary(context.Context, *GetAnalysisReq) (*GetSummaryResp, error)
	mustEmbedUnimplementedAnalysisServer()
}

// UnimplementedAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysisServer struct {
}

func (UnimplementedAnalysisServer) DelLanguage(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLanguage not implemented")
}
func (UnimplementedAnalysisServer) DelNation(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNation not implemented")
}
func (UnimplementedAnalysisServer) DelScore(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelScore not implemented")
}
func (UnimplementedAnalysisServer) DelSummary(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSummary not implemented")
}
func (UnimplementedAnalysisServer) UpdateLanguage(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedAnalysisServer) UpdateNation(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNation not implemented")
}
func (UnimplementedAnalysisServer) UpdateScore(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedAnalysisServer) UpdateSummary(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (UnimplementedAnalysisServer) GetLanguages(context.Context, *GetAnalysisReq) (*GetLanguagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedAnalysisServer) GetNation(context.Context, *GetAnalysisReq) (*GetNationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNation not implemented")
}
func (UnimplementedAnalysisServer) GetScore(context.Context, *GetAnalysisReq) (*GetScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedAnalysisServer) GetSummary(context.Context, *GetAnalysisReq) (*GetSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedAnalysisServer) mustEmbedUnimplementedAnalysisServer() {}

// UnsafeAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServer will
// result in compilation errors.
type UnsafeAnalysisServer interface {
	mustEmbedUnimplementedAnalysisServer()
}

func RegisterAnalysisServer(s grpc.ServiceRegistrar, srv AnalysisServer) {
	s.RegisterService(&Analysis_ServiceDesc, srv)
}

func _Analysis_DelLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelLanguage(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelNation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelNation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelNation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelNation(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelScore(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelSummary(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateLanguage(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateNation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateNation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateNation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateNation(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateScore(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateSummary(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetLanguages(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetNation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetNation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetNation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetNation(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetScore(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetSummary(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Analysis_ServiceDesc is the grpc.ServiceDesc for Analysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analysis.analysis",
	HandlerType: (*AnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelLanguage",
			Handler:    _Analysis_DelLanguage_Handler,
		},
		{
			MethodName: "DelNation",
			Handler:    _Analysis_DelNation_Handler,
		},
		{
			MethodName: "DelScore",
			Handler:    _Analysis_DelScore_Handler,
		},
		{
			MethodName: "DelSummary",
			Handler:    _Analysis_DelSummary_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _Analysis_UpdateLanguage_Handler,
		},
		{
			MethodName: "UpdateNation",
			Handler:    _Analysis_UpdateNation_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _Analysis_UpdateScore_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _Analysis_UpdateSummary_Handler,
		},
		{
			MethodName: "GetLanguages",
			Handler:    _Analysis_GetLanguages_Handler,
		},
		{
			MethodName: "GetNation",
			Handler:    _Analysis_GetNation_Handler,
		},
		{
			MethodName: "GetScore",
			Handler:    _Analysis_GetScore_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _Analysis_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/analysis.proto",
}
