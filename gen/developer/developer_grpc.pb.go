// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: idl/developer.proto

package developer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Developer_AddDeveloper_FullMethodName        = "/developer.developer/AddDeveloper"
	Developer_UpdateDeveloper_FullMethodName     = "/developer.developer/UpdateDeveloper"
	Developer_DelDeveloperById_FullMethodName    = "/developer.developer/DelDeveloperById"
	Developer_DelDeveloperByLogin_FullMethodName = "/developer.developer/DelDeveloperByLogin"
	Developer_GetDeveloperById_FullMethodName    = "/developer.developer/GetDeveloperById"
	Developer_GetDeveloperByLogin_FullMethodName = "/developer.developer/GetDeveloperByLogin"
)

// DeveloperClient is the client API for Developer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperClient interface {
	AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error)
	UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error)
	DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error)
	DelDeveloperByLogin(ctx context.Context, in *DelDeveloperByLoginReq, opts ...grpc.CallOption) (*DelDeveloperByLoginResp, error)
	GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error)
	GetDeveloperByLogin(ctx context.Context, in *GetDeveloperByLoginReq, opts ...grpc.CallOption) (*GetDeveloperByLoginResp, error)
}

type developerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperClient(cc grpc.ClientConnInterface) DeveloperClient {
	return &developerClient{cc}
}

func (c *developerClient) AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error) {
	out := new(AddDeveloperResp)
	err := c.cc.Invoke(ctx, Developer_AddDeveloper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error) {
	out := new(UpdateDeveloperResp)
	err := c.cc.Invoke(ctx, Developer_UpdateDeveloper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error) {
	out := new(DelDeveloperByIdResp)
	err := c.cc.Invoke(ctx, Developer_DelDeveloperById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) DelDeveloperByLogin(ctx context.Context, in *DelDeveloperByLoginReq, opts ...grpc.CallOption) (*DelDeveloperByLoginResp, error) {
	out := new(DelDeveloperByLoginResp)
	err := c.cc.Invoke(ctx, Developer_DelDeveloperByLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error) {
	out := new(GetDeveloperByIdResp)
	err := c.cc.Invoke(ctx, Developer_GetDeveloperById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetDeveloperByLogin(ctx context.Context, in *GetDeveloperByLoginReq, opts ...grpc.CallOption) (*GetDeveloperByLoginResp, error) {
	out := new(GetDeveloperByLoginResp)
	err := c.cc.Invoke(ctx, Developer_GetDeveloperByLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperServer is the server API for Developer service.
// All implementations must embed UnimplementedDeveloperServer
// for forward compatibility
type DeveloperServer interface {
	AddDeveloper(context.Context, *AddDeveloperReq) (*AddDeveloperResp, error)
	UpdateDeveloper(context.Context, *UpdateDeveloperReq) (*UpdateDeveloperResp, error)
	DelDeveloperById(context.Context, *DelDeveloperByIdReq) (*DelDeveloperByIdResp, error)
	DelDeveloperByLogin(context.Context, *DelDeveloperByLoginReq) (*DelDeveloperByLoginResp, error)
	GetDeveloperById(context.Context, *GetDeveloperByIdReq) (*GetDeveloperByIdResp, error)
	GetDeveloperByLogin(context.Context, *GetDeveloperByLoginReq) (*GetDeveloperByLoginResp, error)
	mustEmbedUnimplementedDeveloperServer()
}

// UnimplementedDeveloperServer must be embedded to have forward compatible implementations.
type UnimplementedDeveloperServer struct {
}

func (UnimplementedDeveloperServer) AddDeveloper(context.Context, *AddDeveloperReq) (*AddDeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeveloper not implemented")
}
func (UnimplementedDeveloperServer) UpdateDeveloper(context.Context, *UpdateDeveloperReq) (*UpdateDeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloper not implemented")
}
func (UnimplementedDeveloperServer) DelDeveloperById(context.Context, *DelDeveloperByIdReq) (*DelDeveloperByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeveloperById not implemented")
}
func (UnimplementedDeveloperServer) DelDeveloperByLogin(context.Context, *DelDeveloperByLoginReq) (*DelDeveloperByLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeveloperByLogin not implemented")
}
func (UnimplementedDeveloperServer) GetDeveloperById(context.Context, *GetDeveloperByIdReq) (*GetDeveloperByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperById not implemented")
}
func (UnimplementedDeveloperServer) GetDeveloperByLogin(context.Context, *GetDeveloperByLoginReq) (*GetDeveloperByLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperByLogin not implemented")
}
func (UnimplementedDeveloperServer) mustEmbedUnimplementedDeveloperServer() {}

// UnsafeDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperServer will
// result in compilation errors.
type UnsafeDeveloperServer interface {
	mustEmbedUnimplementedDeveloperServer()
}

func RegisterDeveloperServer(s grpc.ServiceRegistrar, srv DeveloperServer) {
	s.RegisterService(&Developer_ServiceDesc, srv)
}

func _Developer_AddDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).AddDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_AddDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).AddDeveloper(ctx, req.(*AddDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_UpdateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).UpdateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_UpdateDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).UpdateDeveloper(ctx, req.(*UpdateDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_DelDeveloperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeveloperByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).DelDeveloperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_DelDeveloperById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).DelDeveloperById(ctx, req.(*DelDeveloperByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_DelDeveloperByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeveloperByLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).DelDeveloperByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_DelDeveloperByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).DelDeveloperByLogin(ctx, req.(*DelDeveloperByLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetDeveloperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetDeveloperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_GetDeveloperById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetDeveloperById(ctx, req.(*GetDeveloperByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetDeveloperByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperByLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetDeveloperByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_GetDeveloperByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetDeveloperByLogin(ctx, req.(*GetDeveloperByLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Developer_ServiceDesc is the grpc.ServiceDesc for Developer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Developer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "developer.developer",
	HandlerType: (*DeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeveloper",
			Handler:    _Developer_AddDeveloper_Handler,
		},
		{
			MethodName: "UpdateDeveloper",
			Handler:    _Developer_UpdateDeveloper_Handler,
		},
		{
			MethodName: "DelDeveloperById",
			Handler:    _Developer_DelDeveloperById_Handler,
		},
		{
			MethodName: "DelDeveloperByLogin",
			Handler:    _Developer_DelDeveloperByLogin_Handler,
		},
		{
			MethodName: "GetDeveloperById",
			Handler:    _Developer_GetDeveloperById_Handler,
		},
		{
			MethodName: "GetDeveloperByLogin",
			Handler:    _Developer_GetDeveloperByLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/developer.proto",
}
