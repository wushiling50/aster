// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: idl/relation.proto

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relation_AddCreateRepo_FullMethodName                = "/relation.relation/AddCreateRepo"
	Relation_DelCreateRepo_FullMethodName                = "/relation.relation/DelCreateRepo"
	Relation_DelAllCreatedRepo_FullMethodName            = "/relation.relation/DelAllCreatedRepo"
	Relation_GetCreatorId_FullMethodName                 = "/relation.relation/GetCreatorId"
	Relation_SearchCreatedRepo_FullMethodName            = "/relation.relation/SearchCreatedRepo"
	Relation_UpdateCreateRepo_FullMethodName             = "/relation.relation/UpdateCreateRepo"
	Relation_GetCreatedRepoUpdatedAt_FullMethodName      = "/relation.relation/GetCreatedRepoUpdatedAt"
	Relation_AddFollow_FullMethodName                    = "/relation.relation/AddFollow"
	Relation_DelFollow_FullMethodName                    = "/relation.relation/DelFollow"
	Relation_DelAllFollower_FullMethodName               = "/relation.relation/DelAllFollower"
	Relation_DelAllFollowing_FullMethodName              = "/relation.relation/DelAllFollowing"
	Relation_CheckIfFollow_FullMethodName                = "/relation.relation/CheckIfFollow"
	Relation_SearchFollowingByDeveloperId_FullMethodName = "/relation.relation/SearchFollowingByDeveloperId"
	Relation_SearchFollowerByDeveloperId_FullMethodName  = "/relation.relation/SearchFollowerByDeveloperId"
	Relation_UpdateFollowing_FullMethodName              = "/relation.relation/UpdateFollowing"
	Relation_UpdateFollower_FullMethodName               = "/relation.relation/UpdateFollower"
	Relation_GetFollowingUpdatedAt_FullMethodName        = "/relation.relation/GetFollowingUpdatedAt"
	Relation_GetFollowerUpdatedAt_FullMethodName         = "/relation.relation/GetFollowerUpdatedAt"
	Relation_AddFork_FullMethodName                      = "/relation.relation/AddFork"
	Relation_DelFork_FullMethodName                      = "/relation.relation/DelFork"
	Relation_DelAllFork_FullMethodName                   = "/relation.relation/DelAllFork"
	Relation_GetOrigin_FullMethodName                    = "/relation.relation/GetOrigin"
	Relation_SearchFork_FullMethodName                   = "/relation.relation/SearchFork"
	Relation_UpdateFork_FullMethodName                   = "/relation.relation/UpdateFork"
	Relation_GetForkUpdatedAt_FullMethodName             = "/relation.relation/GetForkUpdatedAt"
	Relation_AddStar_FullMethodName                      = "/relation.relation/AddStar"
	Relation_DelStar_FullMethodName                      = "/relation.relation/DelStar"
	Relation_DelAllStarredRepo_FullMethodName            = "/relation.relation/DelAllStarredRepo"
	Relation_DelAllStaringDev_FullMethodName             = "/relation.relation/DelAllStaringDev"
	Relation_CheckIfStar_FullMethodName                  = "/relation.relation/CheckIfStar"
	Relation_SearchStarredRepo_FullMethodName            = "/relation.relation/SearchStarredRepo"
	Relation_SearchStaringDev_FullMethodName             = "/relation.relation/SearchStaringDev"
	Relation_UpdateStarredRepo_FullMethodName            = "/relation.relation/UpdateStarredRepo"
	Relation_GetStarredRepoUpdatedAt_FullMethodName      = "/relation.relation/GetStarredRepoUpdatedAt"
)

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	// -----------------------CreateRepo-----------------------
	AddCreateRepo(ctx context.Context, in *AddCreateRepoReq, opts ...grpc.CallOption) (*AddCreateRepoResp, error)
	DelCreateRepo(ctx context.Context, in *DelCreateRepoReq, opts ...grpc.CallOption) (*DelCreateRepoResp, error)
	DelAllCreatedRepo(ctx context.Context, in *DelAllCreatedRepoReq, opts ...grpc.CallOption) (*DelAllCreatedRepoResp, error)
	GetCreatorId(ctx context.Context, in *GetCreatorIdReq, opts ...grpc.CallOption) (*GetCreatorIdResp, error)
	SearchCreatedRepo(ctx context.Context, in *SearchCreatedRepoReq, opts ...grpc.CallOption) (*SearchCreatedRepoResp, error)
	UpdateCreateRepo(ctx context.Context, in *UpdateCreateRepoReq, opts ...grpc.CallOption) (*UpdateCreateRepoResp, error)
	GetCreatedRepoUpdatedAt(ctx context.Context, in *GetCreatedRepoUpdatedAtReq, opts ...grpc.CallOption) (*GetCreatedRepoUpdatedAtResp, error)
	// -----------------------Follow-----------------------
	AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error)
	DelFollow(ctx context.Context, in *DelFollowReq, opts ...grpc.CallOption) (*DelFollowResp, error)
	DelAllFollower(ctx context.Context, in *DelAllFollowerReq, opts ...grpc.CallOption) (*DelAllFollowerResp, error)
	DelAllFollowing(ctx context.Context, in *DelAllFollowingReq, opts ...grpc.CallOption) (*DelAllFollowingResp, error)
	CheckIfFollow(ctx context.Context, in *CheckIfFollowReq, opts ...grpc.CallOption) (*CheckFollowResp, error)
	SearchFollowingByDeveloperId(ctx context.Context, in *SearchFollowingByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowingByDeveloperIdResp, error)
	SearchFollowerByDeveloperId(ctx context.Context, in *SearchFollowerByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowerByDeveloperIdResp, error)
	UpdateFollowing(ctx context.Context, in *UpdateFollowingReq, opts ...grpc.CallOption) (*UpdateFollowingResp, error)
	UpdateFollower(ctx context.Context, in *UpdateFollowerReq, opts ...grpc.CallOption) (*UpdateFollowerResp, error)
	GetFollowingUpdatedAt(ctx context.Context, in *GetFollowingUpdatedAtReq, opts ...grpc.CallOption) (*GetFollowingUpdatedAtResp, error)
	GetFollowerUpdatedAt(ctx context.Context, in *GetFollowerUpdatedAtReq, opts ...grpc.CallOption) (*GetFollowerUpdatedAtResp, error)
	// -----------------------Fork-----------------------
	AddFork(ctx context.Context, in *AddForkReq, opts ...grpc.CallOption) (*AddForkResp, error)
	DelFork(ctx context.Context, in *DelForkReq, opts ...grpc.CallOption) (*DelForkResp, error)
	DelAllFork(ctx context.Context, in *DelAllForkReq, opts ...grpc.CallOption) (*DelAllForkResp, error)
	GetOrigin(ctx context.Context, in *GetOriginReq, opts ...grpc.CallOption) (*GetOriginResp, error)
	SearchFork(ctx context.Context, in *SearchForkReq, opts ...grpc.CallOption) (*SearchForkResp, error)
	UpdateFork(ctx context.Context, in *UpdateForkReq, opts ...grpc.CallOption) (*UpdateForkResp, error)
	GetForkUpdatedAt(ctx context.Context, in *GetForkUpdatedAtReq, opts ...grpc.CallOption) (*GetForkUpdatedAtResp, error)
	// -----------------------Star-----------------------
	AddStar(ctx context.Context, in *AddStarReq, opts ...grpc.CallOption) (*AddStarResp, error)
	DelStar(ctx context.Context, in *DelStarReq, opts ...grpc.CallOption) (*DelStarResp, error)
	DelAllStarredRepo(ctx context.Context, in *DelAllStarredRepoReq, opts ...grpc.CallOption) (*DelAllStarredRepoResp, error)
	DelAllStaringDev(ctx context.Context, in *DelAllStaringDevReq, opts ...grpc.CallOption) (*DelAllStaringDevResp, error)
	CheckIfStar(ctx context.Context, in *CheckIfStarReq, opts ...grpc.CallOption) (*CheckIfStarResp, error)
	SearchStarredRepo(ctx context.Context, in *SearchStarredRepoReq, opts ...grpc.CallOption) (*SearchStarredRepoResp, error)
	SearchStaringDev(ctx context.Context, in *SearchStaringDevReq, opts ...grpc.CallOption) (*SearchStaringDevResp, error)
	UpdateStarredRepo(ctx context.Context, in *UpdateStarredRepoReq, opts ...grpc.CallOption) (*UpdateStarredRepoResp, error)
	GetStarredRepoUpdatedAt(ctx context.Context, in *GetStarredRepoUpdatedAtReq, opts ...grpc.CallOption) (*GetStarredRepoUpdatedAtResp, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) AddCreateRepo(ctx context.Context, in *AddCreateRepoReq, opts ...grpc.CallOption) (*AddCreateRepoResp, error) {
	out := new(AddCreateRepoResp)
	err := c.cc.Invoke(ctx, Relation_AddCreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelCreateRepo(ctx context.Context, in *DelCreateRepoReq, opts ...grpc.CallOption) (*DelCreateRepoResp, error) {
	out := new(DelCreateRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelCreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllCreatedRepo(ctx context.Context, in *DelAllCreatedRepoReq, opts ...grpc.CallOption) (*DelAllCreatedRepoResp, error) {
	out := new(DelAllCreatedRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelAllCreatedRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetCreatorId(ctx context.Context, in *GetCreatorIdReq, opts ...grpc.CallOption) (*GetCreatorIdResp, error) {
	out := new(GetCreatorIdResp)
	err := c.cc.Invoke(ctx, Relation_GetCreatorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchCreatedRepo(ctx context.Context, in *SearchCreatedRepoReq, opts ...grpc.CallOption) (*SearchCreatedRepoResp, error) {
	out := new(SearchCreatedRepoResp)
	err := c.cc.Invoke(ctx, Relation_SearchCreatedRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateCreateRepo(ctx context.Context, in *UpdateCreateRepoReq, opts ...grpc.CallOption) (*UpdateCreateRepoResp, error) {
	out := new(UpdateCreateRepoResp)
	err := c.cc.Invoke(ctx, Relation_UpdateCreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetCreatedRepoUpdatedAt(ctx context.Context, in *GetCreatedRepoUpdatedAtReq, opts ...grpc.CallOption) (*GetCreatedRepoUpdatedAtResp, error) {
	out := new(GetCreatedRepoUpdatedAtResp)
	err := c.cc.Invoke(ctx, Relation_GetCreatedRepoUpdatedAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error) {
	out := new(AddFollowResp)
	err := c.cc.Invoke(ctx, Relation_AddFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFollow(ctx context.Context, in *DelFollowReq, opts ...grpc.CallOption) (*DelFollowResp, error) {
	out := new(DelFollowResp)
	err := c.cc.Invoke(ctx, Relation_DelFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFollower(ctx context.Context, in *DelAllFollowerReq, opts ...grpc.CallOption) (*DelAllFollowerResp, error) {
	out := new(DelAllFollowerResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFollowing(ctx context.Context, in *DelAllFollowingReq, opts ...grpc.CallOption) (*DelAllFollowingResp, error) {
	out := new(DelAllFollowingResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CheckIfFollow(ctx context.Context, in *CheckIfFollowReq, opts ...grpc.CallOption) (*CheckFollowResp, error) {
	out := new(CheckFollowResp)
	err := c.cc.Invoke(ctx, Relation_CheckIfFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFollowingByDeveloperId(ctx context.Context, in *SearchFollowingByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowingByDeveloperIdResp, error) {
	out := new(SearchFollowingByDeveloperIdResp)
	err := c.cc.Invoke(ctx, Relation_SearchFollowingByDeveloperId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFollowerByDeveloperId(ctx context.Context, in *SearchFollowerByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowerByDeveloperIdResp, error) {
	out := new(SearchFollowerByDeveloperIdResp)
	err := c.cc.Invoke(ctx, Relation_SearchFollowerByDeveloperId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateFollowing(ctx context.Context, in *UpdateFollowingReq, opts ...grpc.CallOption) (*UpdateFollowingResp, error) {
	out := new(UpdateFollowingResp)
	err := c.cc.Invoke(ctx, Relation_UpdateFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateFollower(ctx context.Context, in *UpdateFollowerReq, opts ...grpc.CallOption) (*UpdateFollowerResp, error) {
	out := new(UpdateFollowerResp)
	err := c.cc.Invoke(ctx, Relation_UpdateFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetFollowingUpdatedAt(ctx context.Context, in *GetFollowingUpdatedAtReq, opts ...grpc.CallOption) (*GetFollowingUpdatedAtResp, error) {
	out := new(GetFollowingUpdatedAtResp)
	err := c.cc.Invoke(ctx, Relation_GetFollowingUpdatedAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetFollowerUpdatedAt(ctx context.Context, in *GetFollowerUpdatedAtReq, opts ...grpc.CallOption) (*GetFollowerUpdatedAtResp, error) {
	out := new(GetFollowerUpdatedAtResp)
	err := c.cc.Invoke(ctx, Relation_GetFollowerUpdatedAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddFork(ctx context.Context, in *AddForkReq, opts ...grpc.CallOption) (*AddForkResp, error) {
	out := new(AddForkResp)
	err := c.cc.Invoke(ctx, Relation_AddFork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFork(ctx context.Context, in *DelForkReq, opts ...grpc.CallOption) (*DelForkResp, error) {
	out := new(DelForkResp)
	err := c.cc.Invoke(ctx, Relation_DelFork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFork(ctx context.Context, in *DelAllForkReq, opts ...grpc.CallOption) (*DelAllForkResp, error) {
	out := new(DelAllForkResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetOrigin(ctx context.Context, in *GetOriginReq, opts ...grpc.CallOption) (*GetOriginResp, error) {
	out := new(GetOriginResp)
	err := c.cc.Invoke(ctx, Relation_GetOrigin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFork(ctx context.Context, in *SearchForkReq, opts ...grpc.CallOption) (*SearchForkResp, error) {
	out := new(SearchForkResp)
	err := c.cc.Invoke(ctx, Relation_SearchFork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateFork(ctx context.Context, in *UpdateForkReq, opts ...grpc.CallOption) (*UpdateForkResp, error) {
	out := new(UpdateForkResp)
	err := c.cc.Invoke(ctx, Relation_UpdateFork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetForkUpdatedAt(ctx context.Context, in *GetForkUpdatedAtReq, opts ...grpc.CallOption) (*GetForkUpdatedAtResp, error) {
	out := new(GetForkUpdatedAtResp)
	err := c.cc.Invoke(ctx, Relation_GetForkUpdatedAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddStar(ctx context.Context, in *AddStarReq, opts ...grpc.CallOption) (*AddStarResp, error) {
	out := new(AddStarResp)
	err := c.cc.Invoke(ctx, Relation_AddStar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelStar(ctx context.Context, in *DelStarReq, opts ...grpc.CallOption) (*DelStarResp, error) {
	out := new(DelStarResp)
	err := c.cc.Invoke(ctx, Relation_DelStar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllStarredRepo(ctx context.Context, in *DelAllStarredRepoReq, opts ...grpc.CallOption) (*DelAllStarredRepoResp, error) {
	out := new(DelAllStarredRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelAllStarredRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllStaringDev(ctx context.Context, in *DelAllStaringDevReq, opts ...grpc.CallOption) (*DelAllStaringDevResp, error) {
	out := new(DelAllStaringDevResp)
	err := c.cc.Invoke(ctx, Relation_DelAllStaringDev_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CheckIfStar(ctx context.Context, in *CheckIfStarReq, opts ...grpc.CallOption) (*CheckIfStarResp, error) {
	out := new(CheckIfStarResp)
	err := c.cc.Invoke(ctx, Relation_CheckIfStar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchStarredRepo(ctx context.Context, in *SearchStarredRepoReq, opts ...grpc.CallOption) (*SearchStarredRepoResp, error) {
	out := new(SearchStarredRepoResp)
	err := c.cc.Invoke(ctx, Relation_SearchStarredRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchStaringDev(ctx context.Context, in *SearchStaringDevReq, opts ...grpc.CallOption) (*SearchStaringDevResp, error) {
	out := new(SearchStaringDevResp)
	err := c.cc.Invoke(ctx, Relation_SearchStaringDev_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateStarredRepo(ctx context.Context, in *UpdateStarredRepoReq, opts ...grpc.CallOption) (*UpdateStarredRepoResp, error) {
	out := new(UpdateStarredRepoResp)
	err := c.cc.Invoke(ctx, Relation_UpdateStarredRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetStarredRepoUpdatedAt(ctx context.Context, in *GetStarredRepoUpdatedAtReq, opts ...grpc.CallOption) (*GetStarredRepoUpdatedAtResp, error) {
	out := new(GetStarredRepoUpdatedAtResp)
	err := c.cc.Invoke(ctx, Relation_GetStarredRepoUpdatedAt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	// -----------------------CreateRepo-----------------------
	AddCreateRepo(context.Context, *AddCreateRepoReq) (*AddCreateRepoResp, error)
	DelCreateRepo(context.Context, *DelCreateRepoReq) (*DelCreateRepoResp, error)
	DelAllCreatedRepo(context.Context, *DelAllCreatedRepoReq) (*DelAllCreatedRepoResp, error)
	GetCreatorId(context.Context, *GetCreatorIdReq) (*GetCreatorIdResp, error)
	SearchCreatedRepo(context.Context, *SearchCreatedRepoReq) (*SearchCreatedRepoResp, error)
	UpdateCreateRepo(context.Context, *UpdateCreateRepoReq) (*UpdateCreateRepoResp, error)
	GetCreatedRepoUpdatedAt(context.Context, *GetCreatedRepoUpdatedAtReq) (*GetCreatedRepoUpdatedAtResp, error)
	// -----------------------Follow-----------------------
	AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error)
	DelFollow(context.Context, *DelFollowReq) (*DelFollowResp, error)
	DelAllFollower(context.Context, *DelAllFollowerReq) (*DelAllFollowerResp, error)
	DelAllFollowing(context.Context, *DelAllFollowingReq) (*DelAllFollowingResp, error)
	CheckIfFollow(context.Context, *CheckIfFollowReq) (*CheckFollowResp, error)
	SearchFollowingByDeveloperId(context.Context, *SearchFollowingByDeveloperIdReq) (*SearchFollowingByDeveloperIdResp, error)
	SearchFollowerByDeveloperId(context.Context, *SearchFollowerByDeveloperIdReq) (*SearchFollowerByDeveloperIdResp, error)
	UpdateFollowing(context.Context, *UpdateFollowingReq) (*UpdateFollowingResp, error)
	UpdateFollower(context.Context, *UpdateFollowerReq) (*UpdateFollowerResp, error)
	GetFollowingUpdatedAt(context.Context, *GetFollowingUpdatedAtReq) (*GetFollowingUpdatedAtResp, error)
	GetFollowerUpdatedAt(context.Context, *GetFollowerUpdatedAtReq) (*GetFollowerUpdatedAtResp, error)
	// -----------------------Fork-----------------------
	AddFork(context.Context, *AddForkReq) (*AddForkResp, error)
	DelFork(context.Context, *DelForkReq) (*DelForkResp, error)
	DelAllFork(context.Context, *DelAllForkReq) (*DelAllForkResp, error)
	GetOrigin(context.Context, *GetOriginReq) (*GetOriginResp, error)
	SearchFork(context.Context, *SearchForkReq) (*SearchForkResp, error)
	UpdateFork(context.Context, *UpdateForkReq) (*UpdateForkResp, error)
	GetForkUpdatedAt(context.Context, *GetForkUpdatedAtReq) (*GetForkUpdatedAtResp, error)
	// -----------------------Star-----------------------
	AddStar(context.Context, *AddStarReq) (*AddStarResp, error)
	DelStar(context.Context, *DelStarReq) (*DelStarResp, error)
	DelAllStarredRepo(context.Context, *DelAllStarredRepoReq) (*DelAllStarredRepoResp, error)
	DelAllStaringDev(context.Context, *DelAllStaringDevReq) (*DelAllStaringDevResp, error)
	CheckIfStar(context.Context, *CheckIfStarReq) (*CheckIfStarResp, error)
	SearchStarredRepo(context.Context, *SearchStarredRepoReq) (*SearchStarredRepoResp, error)
	SearchStaringDev(context.Context, *SearchStaringDevReq) (*SearchStaringDevResp, error)
	UpdateStarredRepo(context.Context, *UpdateStarredRepoReq) (*UpdateStarredRepoResp, error)
	GetStarredRepoUpdatedAt(context.Context, *GetStarredRepoUpdatedAtReq) (*GetStarredRepoUpdatedAtResp, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) AddCreateRepo(context.Context, *AddCreateRepoReq) (*AddCreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreateRepo not implemented")
}
func (UnimplementedRelationServer) DelCreateRepo(context.Context, *DelCreateRepoReq) (*DelCreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCreateRepo not implemented")
}
func (UnimplementedRelationServer) DelAllCreatedRepo(context.Context, *DelAllCreatedRepoReq) (*DelAllCreatedRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllCreatedRepo not implemented")
}
func (UnimplementedRelationServer) GetCreatorId(context.Context, *GetCreatorIdReq) (*GetCreatorIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatorId not implemented")
}
func (UnimplementedRelationServer) SearchCreatedRepo(context.Context, *SearchCreatedRepoReq) (*SearchCreatedRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCreatedRepo not implemented")
}
func (UnimplementedRelationServer) UpdateCreateRepo(context.Context, *UpdateCreateRepoReq) (*UpdateCreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreateRepo not implemented")
}
func (UnimplementedRelationServer) GetCreatedRepoUpdatedAt(context.Context, *GetCreatedRepoUpdatedAtReq) (*GetCreatedRepoUpdatedAtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatedRepoUpdatedAt not implemented")
}
func (UnimplementedRelationServer) AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (UnimplementedRelationServer) DelFollow(context.Context, *DelFollowReq) (*DelFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFollow not implemented")
}
func (UnimplementedRelationServer) DelAllFollower(context.Context, *DelAllFollowerReq) (*DelAllFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFollower not implemented")
}
func (UnimplementedRelationServer) DelAllFollowing(context.Context, *DelAllFollowingReq) (*DelAllFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFollowing not implemented")
}
func (UnimplementedRelationServer) CheckIfFollow(context.Context, *CheckIfFollowReq) (*CheckFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfFollow not implemented")
}
func (UnimplementedRelationServer) SearchFollowingByDeveloperId(context.Context, *SearchFollowingByDeveloperIdReq) (*SearchFollowingByDeveloperIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFollowingByDeveloperId not implemented")
}
func (UnimplementedRelationServer) SearchFollowerByDeveloperId(context.Context, *SearchFollowerByDeveloperIdReq) (*SearchFollowerByDeveloperIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFollowerByDeveloperId not implemented")
}
func (UnimplementedRelationServer) UpdateFollowing(context.Context, *UpdateFollowingReq) (*UpdateFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollowing not implemented")
}
func (UnimplementedRelationServer) UpdateFollower(context.Context, *UpdateFollowerReq) (*UpdateFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollower not implemented")
}
func (UnimplementedRelationServer) GetFollowingUpdatedAt(context.Context, *GetFollowingUpdatedAtReq) (*GetFollowingUpdatedAtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingUpdatedAt not implemented")
}
func (UnimplementedRelationServer) GetFollowerUpdatedAt(context.Context, *GetFollowerUpdatedAtReq) (*GetFollowerUpdatedAtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerUpdatedAt not implemented")
}
func (UnimplementedRelationServer) AddFork(context.Context, *AddForkReq) (*AddForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFork not implemented")
}
func (UnimplementedRelationServer) DelFork(context.Context, *DelForkReq) (*DelForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFork not implemented")
}
func (UnimplementedRelationServer) DelAllFork(context.Context, *DelAllForkReq) (*DelAllForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFork not implemented")
}
func (UnimplementedRelationServer) GetOrigin(context.Context, *GetOriginReq) (*GetOriginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrigin not implemented")
}
func (UnimplementedRelationServer) SearchFork(context.Context, *SearchForkReq) (*SearchForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFork not implemented")
}
func (UnimplementedRelationServer) UpdateFork(context.Context, *UpdateForkReq) (*UpdateForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFork not implemented")
}
func (UnimplementedRelationServer) GetForkUpdatedAt(context.Context, *GetForkUpdatedAtReq) (*GetForkUpdatedAtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForkUpdatedAt not implemented")
}
func (UnimplementedRelationServer) AddStar(context.Context, *AddStarReq) (*AddStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStar not implemented")
}
func (UnimplementedRelationServer) DelStar(context.Context, *DelStarReq) (*DelStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStar not implemented")
}
func (UnimplementedRelationServer) DelAllStarredRepo(context.Context, *DelAllStarredRepoReq) (*DelAllStarredRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllStarredRepo not implemented")
}
func (UnimplementedRelationServer) DelAllStaringDev(context.Context, *DelAllStaringDevReq) (*DelAllStaringDevResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllStaringDev not implemented")
}
func (UnimplementedRelationServer) CheckIfStar(context.Context, *CheckIfStarReq) (*CheckIfStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfStar not implemented")
}
func (UnimplementedRelationServer) SearchStarredRepo(context.Context, *SearchStarredRepoReq) (*SearchStarredRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStarredRepo not implemented")
}
func (UnimplementedRelationServer) SearchStaringDev(context.Context, *SearchStaringDevReq) (*SearchStaringDevResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStaringDev not implemented")
}
func (UnimplementedRelationServer) UpdateStarredRepo(context.Context, *UpdateStarredRepoReq) (*UpdateStarredRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStarredRepo not implemented")
}
func (UnimplementedRelationServer) GetStarredRepoUpdatedAt(context.Context, *GetStarredRepoUpdatedAtReq) (*GetStarredRepoUpdatedAtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarredRepoUpdatedAt not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_AddCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddCreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddCreateRepo(ctx, req.(*AddCreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelCreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelCreateRepo(ctx, req.(*DelCreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllCreatedRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllCreatedRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllCreatedRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllCreatedRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllCreatedRepo(ctx, req.(*DelAllCreatedRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetCreatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatorIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetCreatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetCreatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetCreatorId(ctx, req.(*GetCreatorIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchCreatedRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCreatedRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchCreatedRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchCreatedRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchCreatedRepo(ctx, req.(*SearchCreatedRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_UpdateCreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateCreateRepo(ctx, req.(*UpdateCreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetCreatedRepoUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatedRepoUpdatedAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetCreatedRepoUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetCreatedRepoUpdatedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetCreatedRepoUpdatedAt(ctx, req.(*GetCreatedRepoUpdatedAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddFollow(ctx, req.(*AddFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFollow(ctx, req.(*DelFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFollower(ctx, req.(*DelAllFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFollowing(ctx, req.(*DelAllFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CheckIfFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CheckIfFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CheckIfFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CheckIfFollow(ctx, req.(*CheckIfFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFollowingByDeveloperId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFollowingByDeveloperIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFollowingByDeveloperId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFollowingByDeveloperId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFollowingByDeveloperId(ctx, req.(*SearchFollowingByDeveloperIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFollowerByDeveloperId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFollowerByDeveloperIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFollowerByDeveloperId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFollowerByDeveloperId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFollowerByDeveloperId(ctx, req.(*SearchFollowerByDeveloperIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_UpdateFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateFollowing(ctx, req.(*UpdateFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_UpdateFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateFollower(ctx, req.(*UpdateFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetFollowingUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingUpdatedAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowingUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetFollowingUpdatedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowingUpdatedAt(ctx, req.(*GetFollowingUpdatedAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetFollowerUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerUpdatedAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowerUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetFollowerUpdatedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowerUpdatedAt(ctx, req.(*GetFollowerUpdatedAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddFork(ctx, req.(*AddForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFork(ctx, req.(*DelForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFork(ctx, req.(*DelAllForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetOrigin(ctx, req.(*GetOriginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFork(ctx, req.(*SearchForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_UpdateFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateFork(ctx, req.(*UpdateForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetForkUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForkUpdatedAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetForkUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetForkUpdatedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetForkUpdatedAt(ctx, req.(*GetForkUpdatedAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddStar(ctx, req.(*AddStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelStar(ctx, req.(*DelStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllStarredRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllStarredRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllStarredRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllStarredRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllStarredRepo(ctx, req.(*DelAllStarredRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllStaringDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllStaringDevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllStaringDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllStaringDev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllStaringDev(ctx, req.(*DelAllStaringDevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CheckIfStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CheckIfStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CheckIfStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CheckIfStar(ctx, req.(*CheckIfStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchStarredRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStarredRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchStarredRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchStarredRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchStarredRepo(ctx, req.(*SearchStarredRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchStaringDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStaringDevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchStaringDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchStaringDev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchStaringDev(ctx, req.(*SearchStaringDevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateStarredRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStarredRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateStarredRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_UpdateStarredRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateStarredRepo(ctx, req.(*UpdateStarredRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetStarredRepoUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarredRepoUpdatedAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetStarredRepoUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetStarredRepoUpdatedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetStarredRepoUpdatedAt(ctx, req.(*GetStarredRepoUpdatedAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCreateRepo",
			Handler:    _Relation_AddCreateRepo_Handler,
		},
		{
			MethodName: "DelCreateRepo",
			Handler:    _Relation_DelCreateRepo_Handler,
		},
		{
			MethodName: "DelAllCreatedRepo",
			Handler:    _Relation_DelAllCreatedRepo_Handler,
		},
		{
			MethodName: "GetCreatorId",
			Handler:    _Relation_GetCreatorId_Handler,
		},
		{
			MethodName: "SearchCreatedRepo",
			Handler:    _Relation_SearchCreatedRepo_Handler,
		},
		{
			MethodName: "UpdateCreateRepo",
			Handler:    _Relation_UpdateCreateRepo_Handler,
		},
		{
			MethodName: "GetCreatedRepoUpdatedAt",
			Handler:    _Relation_GetCreatedRepoUpdatedAt_Handler,
		},
		{
			MethodName: "AddFollow",
			Handler:    _Relation_AddFollow_Handler,
		},
		{
			MethodName: "DelFollow",
			Handler:    _Relation_DelFollow_Handler,
		},
		{
			MethodName: "DelAllFollower",
			Handler:    _Relation_DelAllFollower_Handler,
		},
		{
			MethodName: "DelAllFollowing",
			Handler:    _Relation_DelAllFollowing_Handler,
		},
		{
			MethodName: "CheckIfFollow",
			Handler:    _Relation_CheckIfFollow_Handler,
		},
		{
			MethodName: "SearchFollowingByDeveloperId",
			Handler:    _Relation_SearchFollowingByDeveloperId_Handler,
		},
		{
			MethodName: "SearchFollowerByDeveloperId",
			Handler:    _Relation_SearchFollowerByDeveloperId_Handler,
		},
		{
			MethodName: "UpdateFollowing",
			Handler:    _Relation_UpdateFollowing_Handler,
		},
		{
			MethodName: "UpdateFollower",
			Handler:    _Relation_UpdateFollower_Handler,
		},
		{
			MethodName: "GetFollowingUpdatedAt",
			Handler:    _Relation_GetFollowingUpdatedAt_Handler,
		},
		{
			MethodName: "GetFollowerUpdatedAt",
			Handler:    _Relation_GetFollowerUpdatedAt_Handler,
		},
		{
			MethodName: "AddFork",
			Handler:    _Relation_AddFork_Handler,
		},
		{
			MethodName: "DelFork",
			Handler:    _Relation_DelFork_Handler,
		},
		{
			MethodName: "DelAllFork",
			Handler:    _Relation_DelAllFork_Handler,
		},
		{
			MethodName: "GetOrigin",
			Handler:    _Relation_GetOrigin_Handler,
		},
		{
			MethodName: "SearchFork",
			Handler:    _Relation_SearchFork_Handler,
		},
		{
			MethodName: "UpdateFork",
			Handler:    _Relation_UpdateFork_Handler,
		},
		{
			MethodName: "GetForkUpdatedAt",
			Handler:    _Relation_GetForkUpdatedAt_Handler,
		},
		{
			MethodName: "AddStar",
			Handler:    _Relation_AddStar_Handler,
		},
		{
			MethodName: "DelStar",
			Handler:    _Relation_DelStar_Handler,
		},
		{
			MethodName: "DelAllStarredRepo",
			Handler:    _Relation_DelAllStarredRepo_Handler,
		},
		{
			MethodName: "DelAllStaringDev",
			Handler:    _Relation_DelAllStaringDev_Handler,
		},
		{
			MethodName: "CheckIfStar",
			Handler:    _Relation_CheckIfStar_Handler,
		},
		{
			MethodName: "SearchStarredRepo",
			Handler:    _Relation_SearchStarredRepo_Handler,
		},
		{
			MethodName: "SearchStaringDev",
			Handler:    _Relation_SearchStaringDev_Handler,
		},
		{
			MethodName: "UpdateStarredRepo",
			Handler:    _Relation_UpdateStarredRepo_Handler,
		},
		{
			MethodName: "GetStarredRepoUpdatedAt",
			Handler:    _Relation_GetStarredRepoUpdatedAt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/relation.proto",
}
