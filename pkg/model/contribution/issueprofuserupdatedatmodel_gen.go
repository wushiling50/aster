// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package contribution

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	issuePrOfUserUpdatedAtFieldNames          = builder.RawFieldNames(&IssuePrOfUserUpdatedAt{})
	issuePrOfUserUpdatedAtRows                = strings.Join(issuePrOfUserUpdatedAtFieldNames, ",")
	issuePrOfUserUpdatedAtRowsExpectAutoSet   = strings.Join(stringx.Remove(issuePrOfUserUpdatedAtFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	issuePrOfUserUpdatedAtRowsWithPlaceHolder = strings.Join(stringx.Remove(issuePrOfUserUpdatedAtFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheIssuePrOfUserUpdatedAtDataIdPrefix = "cache:issuePrOfUserUpdatedAt:dataId:"
)

type (
	issuePrOfUserUpdatedAtModel interface {
		Insert(ctx context.Context, data *IssuePrOfUserUpdatedAt) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*IssuePrOfUserUpdatedAt, error)
		Update(ctx context.Context, data *IssuePrOfUserUpdatedAt) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultIssuePrOfUserUpdatedAtModel struct {
		sqlc.CachedConn
		table string
	}

	IssuePrOfUserUpdatedAt struct {
		DataId        int64     `db:"data_id"`      // Generated Primary Key, Must Not Be Changed
		DeveloperId   int64     `db:"developer_id"` // Unique GitHub User ID
		DataCreatedAt time.Time `db:"data_created_at"`
		DataUpdatedAt time.Time `db:"data_updated_at"` // update data time
	}
)

func newIssuePrOfUserUpdatedAtModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultIssuePrOfUserUpdatedAtModel {
	return &defaultIssuePrOfUserUpdatedAtModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`issue_pr_of_user_updated_at`",
	}
}

func (m *defaultIssuePrOfUserUpdatedAtModel) Delete(ctx context.Context, dataId int64) error {
	issuePrOfUserUpdatedAtDataIdKey := fmt.Sprintf("%s%v", cacheIssuePrOfUserUpdatedAtDataIdPrefix, dataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, issuePrOfUserUpdatedAtDataIdKey)
	return err
}

func (m *defaultIssuePrOfUserUpdatedAtModel) FindOne(ctx context.Context, dataId int64) (*IssuePrOfUserUpdatedAt, error) {
	issuePrOfUserUpdatedAtDataIdKey := fmt.Sprintf("%s%v", cacheIssuePrOfUserUpdatedAtDataIdPrefix, dataId)
	var resp IssuePrOfUserUpdatedAt
	err := m.QueryRowCtx(ctx, &resp, issuePrOfUserUpdatedAtDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", issuePrOfUserUpdatedAtRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIssuePrOfUserUpdatedAtModel) Insert(ctx context.Context, data *IssuePrOfUserUpdatedAt) (sql.Result, error) {
	issuePrOfUserUpdatedAtDataIdKey := fmt.Sprintf("%s%v", cacheIssuePrOfUserUpdatedAtDataIdPrefix, data.DataId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, issuePrOfUserUpdatedAtRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataId, data.DeveloperId, data.DataCreatedAt, data.DataUpdatedAt)
	}, issuePrOfUserUpdatedAtDataIdKey)
	return ret, err
}

func (m *defaultIssuePrOfUserUpdatedAtModel) Update(ctx context.Context, data *IssuePrOfUserUpdatedAt) error {
	issuePrOfUserUpdatedAtDataIdKey := fmt.Sprintf("%s%v", cacheIssuePrOfUserUpdatedAtDataIdPrefix, data.DataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, issuePrOfUserUpdatedAtRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeveloperId, data.DataCreatedAt, data.DataUpdatedAt, data.DataId)
	}, issuePrOfUserUpdatedAtDataIdKey)
	return err
}

func (m *defaultIssuePrOfUserUpdatedAtModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIssuePrOfUserUpdatedAtDataIdPrefix, primary)
}

func (m *defaultIssuePrOfUserUpdatedAtModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", issuePrOfUserUpdatedAtRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultIssuePrOfUserUpdatedAtModel) tableName() string {
	return m.table
}
