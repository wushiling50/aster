// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package developer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	developerFieldNames          = builder.RawFieldNames(&Developer{})
	developerRows                = strings.Join(developerFieldNames, ",")
	developerRowsExpectAutoSet   = strings.Join(stringx.Remove(developerFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	developerRowsWithPlaceHolder = strings.Join(stringx.Remove(developerFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDeveloperDataIdPrefix = "cache:developer:dataId:"
)

type (
	developerModel interface {
		Insert(ctx context.Context, data *Developer) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Developer, error)
		Update(ctx context.Context, data *Developer) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultDeveloperModel struct {
		sqlc.CachedConn
		table string
	}

	Developer struct {
		DataId          int64        `db:"data_id"`          // Generated Primary Key, Must Not Be Changed
		Id              int64        `db:"id"`               // Unique GitHub User ID
		Name            string       `db:"name"`             // Name
		Login           string       `db:"login"`            // Login
		AvatarUrl       string       `db:"avatar_url"`       // Profile Avatar URL
		Company         string       `db:"company"`          // Company
		Location        string       `db:"location"`         // Location
		Bio             string       `db:"bio"`              // User Biography
		Blog            string       `db:"blog"`             // Personal Blog URL
		Email           string       `db:"email"`            // Contact Email
		TwitterUsername string       `db:"twitter_username"` // Twitter Username
		Repos           int64        `db:"repos"`            // Repository Count
		Following       int64        `db:"following"`        // Following Count
		Followers       int64        `db:"followers"`        // Followers Count
		Stars           int64        `db:"stars"`            // Total Stars Received
		Gists           int64        `db:"gists"`            // Gists count
		CreatedAt       time.Time    `db:"created_at"`       // GitHub account creation time
		UpdatedAt       time.Time    `db:"updated_at"`       // GitHub account update time
		DataCreatedAt   time.Time    `db:"data_created_at"`
		DataUpdatedAt   time.Time    `db:"data_updated_at"` // update data time
		DataDeletedAt   sql.NullTime `db:"data_deleted_at"`
	}
)

func newDeveloperModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeveloperModel {
	return &defaultDeveloperModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`developer`",
	}
}

func (m *defaultDeveloperModel) Delete(ctx context.Context, dataId int64) error {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, dataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, developerDataIdKey)
	return err
}

func (m *defaultDeveloperModel) FindOne(ctx context.Context, dataId int64) (*Developer, error) {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, dataId)
	var resp Developer
	err := m.QueryRowCtx(ctx, &resp, developerDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", developerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) Insert(ctx context.Context, data *Developer) (sql.Result, error) {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, data.DataId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, developerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataId, data.Id, data.Name, data.Login, data.AvatarUrl, data.Company, data.Location, data.Bio, data.Blog, data.Email, data.TwitterUsername, data.Repos, data.Following, data.Followers, data.Stars, data.Gists, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt)
	}, developerDataIdKey)
	return ret, err
}

func (m *defaultDeveloperModel) Update(ctx context.Context, data *Developer) error {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, data.DataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, developerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Login, data.AvatarUrl, data.Company, data.Location, data.Bio, data.Blog, data.Email, data.TwitterUsername, data.Repos, data.Following, data.Followers, data.Stars, data.Gists, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt, data.DataId)
	}, developerDataIdKey)
	return err
}

func (m *defaultDeveloperModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, primary)
}

func (m *defaultDeveloperModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", developerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeveloperModel) tableName() string {
	return m.table
}
