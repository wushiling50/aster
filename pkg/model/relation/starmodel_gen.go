// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package relation

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	starFieldNames          = builder.RawFieldNames(&Star{})
	starRows                = strings.Join(starFieldNames, ",")
	starRowsExpectAutoSet   = strings.Join(stringx.Remove(starFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	starRowsWithPlaceHolder = strings.Join(stringx.Remove(starFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarDataIdPrefix = "cache:star:dataId:"
)

type (
	starModel interface {
		Insert(ctx context.Context, data *Star) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Star, error)
		Update(ctx context.Context, data *Star) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultStarModel struct {
		sqlc.CachedConn
		table string
	}

	Star struct {
		DataId        int64        `db:"data_id"`      // Generated Primary Key, Must Not Be Changed
		DeveloperId   int64        `db:"developer_id"` // Unique GitHub User ID
		RepoId        int64        `db:"repo_id"`      // Unique GitHub Repository ID
		DataCreatedAt time.Time    `db:"data_created_at"`
		DataUpdatedAt time.Time    `db:"data_updated_at"` // update data time
		DataDeletedAt sql.NullTime `db:"data_deleted_at"`
	}
)

func newStarModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStarModel {
	return &defaultStarModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`star`",
	}
}

func (m *defaultStarModel) Delete(ctx context.Context, dataId int64) error {
	starDataIdKey := fmt.Sprintf("%s%v", cacheStarDataIdPrefix, dataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, starDataIdKey)
	return err
}

func (m *defaultStarModel) FindOne(ctx context.Context, dataId int64) (*Star, error) {
	starDataIdKey := fmt.Sprintf("%s%v", cacheStarDataIdPrefix, dataId)
	var resp Star
	err := m.QueryRowCtx(ctx, &resp, starDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", starRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStarModel) Insert(ctx context.Context, data *Star) (sql.Result, error) {
	starDataIdKey := fmt.Sprintf("%s%v", cacheStarDataIdPrefix, data.DataId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, starRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataId, data.DeveloperId, data.RepoId, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt)
	}, starDataIdKey)
	return ret, err
}

func (m *defaultStarModel) Update(ctx context.Context, data *Star) error {
	starDataIdKey := fmt.Sprintf("%s%v", cacheStarDataIdPrefix, data.DataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, starRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeveloperId, data.RepoId, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt, data.DataId)
	}, starDataIdKey)
	return err
}

func (m *defaultStarModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarDataIdPrefix, primary)
}

func (m *defaultStarModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", starRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStarModel) tableName() string {
	return m.table
}
