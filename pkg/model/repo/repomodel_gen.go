// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	repoFieldNames          = builder.RawFieldNames(&Repo{})
	repoRows                = strings.Join(repoFieldNames, ",")
	repoRowsExpectAutoSet   = strings.Join(stringx.Remove(repoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	repoRowsWithPlaceHolder = strings.Join(stringx.Remove(repoFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRepoDataIdPrefix = "cache:repo:dataId:"
)

type (
	repoModel interface {
		Insert(ctx context.Context, data *Repo) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Repo, error)
		Update(ctx context.Context, data *Repo) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultRepoModel struct {
		sqlc.CachedConn
		table string
	}

	Repo struct {
		DataId                  int64        `db:"data_id"`                    // Generated Primary Key, Must Not Be Changed
		Id                      int64        `db:"id"`                         // Unique GitHub Repository ID
		Name                    string       `db:"name"`                       // Repository Name
		StarCount               int64        `db:"star_count"`                 // Number Of Stars
		ForkCount               int64        `db:"fork_count"`                 // Number Of Forks
		IssueCount              int64        `db:"issue_count"`                // Number Of Open Issues
		CommitCount             int64        `db:"commit_count"`               // Number Of Commits
		PrCount                 int64        `db:"pr_count"`                   // Total Pull Requests Count
		Language                string       `db:"language"`                   // Programming Languages Used (JSON Format)
		Description             string       `db:"description"`                // Repository Description
		LastFetchForkAt         int64        `db:"last_fetch_fork_at"`         // Unix Timestamp Of Last Fork Data Fetch
		LastFetchContributionAt int64        `db:"last_fetch_contribution_at"` // Unix Timestamp Of Last Contribution Data Fetch
		MergedPrCount           int64        `db:"merged_pr_count"`            // Count Of Merged Pull Requests
		OpenPrCount             int64        `db:"open_pr_count"`              // Count Of Open Pull Requests
		CommentCount            int64        `db:"comment_count"`              // Total Comments Count
		ReviewCount             int64        `db:"review_count"`               // Code Reviews Count
		DataCreatedAt           time.Time    `db:"data_created_at"`
		DataUpdatedAt           time.Time    `db:"data_updated_at"` // update data time
		DataDeletedAt           sql.NullTime `db:"data_deleted_at"`
	}
)

func newRepoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRepoModel {
	return &defaultRepoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`repo`",
	}
}

func (m *defaultRepoModel) Delete(ctx context.Context, dataId int64) error {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, dataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, repoDataIdKey)
	return err
}

func (m *defaultRepoModel) FindOne(ctx context.Context, dataId int64) (*Repo, error) {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, dataId)
	var resp Repo
	err := m.QueryRowCtx(ctx, &resp, repoDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", repoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepoModel) Insert(ctx context.Context, data *Repo) (sql.Result, error) {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, data.DataId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, repoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataId, data.Id, data.Name, data.StarCount, data.ForkCount, data.IssueCount, data.CommitCount, data.PrCount, data.Language, data.Description, data.LastFetchForkAt, data.LastFetchContributionAt, data.MergedPrCount, data.OpenPrCount, data.CommentCount, data.ReviewCount, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt)
	}, repoDataIdKey)
	return ret, err
}

func (m *defaultRepoModel) Update(ctx context.Context, data *Repo) error {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, data.DataId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, repoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.StarCount, data.ForkCount, data.IssueCount, data.CommitCount, data.PrCount, data.Language, data.Description, data.LastFetchForkAt, data.LastFetchContributionAt, data.MergedPrCount, data.OpenPrCount, data.CommentCount, data.ReviewCount, data.DataCreatedAt, data.DataUpdatedAt, data.DataDeletedAt, data.DataId)
	}, repoDataIdKey)
	return err
}

func (m *defaultRepoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, primary)
}

func (m *defaultRepoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", repoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRepoModel) tableName() string {
	return m.table
}
