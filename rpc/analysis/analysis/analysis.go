// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: analysis.proto

package analysis

import (
	"context"

	"github.com/wushiling50/aster/gen/analysis"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DelAnalysisReq     = analysis_analysis.DelAnalysisReq
	DelAnalysisResp    = analysis_analysis.DelAnalysisResp
	GetAnalysisReq     = analysis_analysis.GetAnalysisReq
	GetLanguagesResp   = analysis_analysis.GetLanguagesResp
	GetNationResp      = analysis_analysis.GetNationResp
	GetScoreResp       = analysis_analysis.GetScoreResp
	GetSummaryResp     = analysis_analysis.GetSummaryResp
	Languages          = analysis_analysis.Languages
	Nation             = analysis_analysis.Nation
	Score              = analysis_analysis.Score
	Summary            = analysis_analysis.Summary
	UpdateAnalysisReq  = analysis_analysis.UpdateAnalysisReq
	UpdateAnalysisResp = analysis_analysis.UpdateAnalysisResp

	Analysis interface {
		DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		DelNation(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		DelScore(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		UpdateNation(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		UpdateScore(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error)
		GetNation(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetNationResp, error)
		GetScore(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetScoreResp, error)
		GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error)
	}

	defaultAnalysis struct {
		cli zrpc.Client
	}
)

func NewAnalysis(cli zrpc.Client) Analysis {
	return &defaultAnalysis{
		cli: cli,
	}
}

func (m *defaultAnalysis) DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.DelLanguage(ctx, in, opts...)
}

func (m *defaultAnalysis) DelNation(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.DelNation(ctx, in, opts...)
}

func (m *defaultAnalysis) DelScore(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.DelScore(ctx, in, opts...)
}

func (m *defaultAnalysis) DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.DelSummary(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.UpdateLanguage(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateNation(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.UpdateNation(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateScore(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.UpdateScore(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.UpdateSummary(ctx, in, opts...)
}

func (m *defaultAnalysis) GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.GetLanguages(ctx, in, opts...)
}

func (m *defaultAnalysis) GetNation(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetNationResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.GetNation(ctx, in, opts...)
}

func (m *defaultAnalysis) GetScore(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetScoreResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.GetScore(ctx, in, opts...)
}

func (m *defaultAnalysis) GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error) {
	client := analysis_analysis.NewAnalysisClient(m.cli.Conn())
	return client.GetSummary(ctx, in, opts...)
}
