// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: relation.proto

package server

import (
	"context"

	"github.com/wushiling50/aster/gen/relation"
	"github.com/wushiling50/aster/rpc/relation/internal/logic"
	"github.com/wushiling50/aster/rpc/relation/internal/svc"
)

type RelationServer struct {
	svcCtx *svc.ServiceContext
	relation_relation.UnimplementedRelationServer
}

func NewRelationServer(svcCtx *svc.ServiceContext) *RelationServer {
	return &RelationServer{
		svcCtx: svcCtx,
	}
}

// -----------------------CreateRepo-----------------------
func (s *RelationServer) AddCreateRepo(ctx context.Context, in *relation_relation.AddCreateRepoReq) (*relation_relation.AddCreateRepoResp, error) {
	l := logic.NewAddCreateRepoLogic(ctx, s.svcCtx)
	return l.AddCreateRepo(in)
}

func (s *RelationServer) DelCreateRepo(ctx context.Context, in *relation_relation.DelCreateRepoReq) (*relation_relation.DelCreateRepoResp, error) {
	l := logic.NewDelCreateRepoLogic(ctx, s.svcCtx)
	return l.DelCreateRepo(in)
}

func (s *RelationServer) DelAllCreatedRepo(ctx context.Context, in *relation_relation.DelAllCreatedRepoReq) (*relation_relation.DelAllCreatedRepoResp, error) {
	l := logic.NewDelAllCreatedRepoLogic(ctx, s.svcCtx)
	return l.DelAllCreatedRepo(in)
}

func (s *RelationServer) GetCreatorId(ctx context.Context, in *relation_relation.GetCreatorIdReq) (*relation_relation.GetCreatorIdResp, error) {
	l := logic.NewGetCreatorIdLogic(ctx, s.svcCtx)
	return l.GetCreatorId(in)
}

func (s *RelationServer) SearchCreatedRepo(ctx context.Context, in *relation_relation.SearchCreatedRepoReq) (*relation_relation.SearchCreatedRepoResp, error) {
	l := logic.NewSearchCreatedRepoLogic(ctx, s.svcCtx)
	return l.SearchCreatedRepo(in)
}

func (s *RelationServer) UpdateCreateRepo(ctx context.Context, in *relation_relation.UpdateCreateRepoReq) (*relation_relation.UpdateCreateRepoResp, error) {
	l := logic.NewUpdateCreateRepoLogic(ctx, s.svcCtx)
	return l.UpdateCreateRepo(in)
}

func (s *RelationServer) GetCreatedRepoUpdatedAt(ctx context.Context, in *relation_relation.GetCreatedRepoUpdatedAtReq) (*relation_relation.GetCreatedRepoUpdatedAtResp, error) {
	l := logic.NewGetCreatedRepoUpdatedAtLogic(ctx, s.svcCtx)
	return l.GetCreatedRepoUpdatedAt(in)
}

// -----------------------Follow-----------------------
func (s *RelationServer) AddFollow(ctx context.Context, in *relation_relation.AddFollowReq) (*relation_relation.AddFollowResp, error) {
	l := logic.NewAddFollowLogic(ctx, s.svcCtx)
	return l.AddFollow(in)
}

func (s *RelationServer) DelFollow(ctx context.Context, in *relation_relation.DelFollowReq) (*relation_relation.DelFollowResp, error) {
	l := logic.NewDelFollowLogic(ctx, s.svcCtx)
	return l.DelFollow(in)
}

func (s *RelationServer) DelAllFollower(ctx context.Context, in *relation_relation.DelAllFollowerReq) (*relation_relation.DelAllFollowerResp, error) {
	l := logic.NewDelAllFollowerLogic(ctx, s.svcCtx)
	return l.DelAllFollower(in)
}

func (s *RelationServer) DelAllFollowing(ctx context.Context, in *relation_relation.DelAllFollowingReq) (*relation_relation.DelAllFollowingResp, error) {
	l := logic.NewDelAllFollowingLogic(ctx, s.svcCtx)
	return l.DelAllFollowing(in)
}

func (s *RelationServer) CheckIfFollow(ctx context.Context, in *relation_relation.CheckIfFollowReq) (*relation_relation.CheckFollowResp, error) {
	l := logic.NewCheckIfFollowLogic(ctx, s.svcCtx)
	return l.CheckIfFollow(in)
}

func (s *RelationServer) SearchFollowingByDeveloperId(ctx context.Context, in *relation_relation.SearchFollowingByDeveloperIdReq) (*relation_relation.SearchFollowingByDeveloperIdResp, error) {
	l := logic.NewSearchFollowingByDeveloperIdLogic(ctx, s.svcCtx)
	return l.SearchFollowingByDeveloperId(in)
}

func (s *RelationServer) SearchFollowerByDeveloperId(ctx context.Context, in *relation_relation.SearchFollowerByDeveloperIdReq) (*relation_relation.SearchFollowerByDeveloperIdResp, error) {
	l := logic.NewSearchFollowerByDeveloperIdLogic(ctx, s.svcCtx)
	return l.SearchFollowerByDeveloperId(in)
}

func (s *RelationServer) UpdateFollowing(ctx context.Context, in *relation_relation.UpdateFollowingReq) (*relation_relation.UpdateFollowingResp, error) {
	l := logic.NewUpdateFollowingLogic(ctx, s.svcCtx)
	return l.UpdateFollowing(in)
}

func (s *RelationServer) UpdateFollower(ctx context.Context, in *relation_relation.UpdateFollowerReq) (*relation_relation.UpdateFollowerResp, error) {
	l := logic.NewUpdateFollowerLogic(ctx, s.svcCtx)
	return l.UpdateFollower(in)
}

func (s *RelationServer) GetFollowingUpdatedAt(ctx context.Context, in *relation_relation.GetFollowingUpdatedAtReq) (*relation_relation.GetFollowingUpdatedAtResp, error) {
	l := logic.NewGetFollowingUpdatedAtLogic(ctx, s.svcCtx)
	return l.GetFollowingUpdatedAt(in)
}

func (s *RelationServer) GetFollowerUpdatedAt(ctx context.Context, in *relation_relation.GetFollowerUpdatedAtReq) (*relation_relation.GetFollowerUpdatedAtResp, error) {
	l := logic.NewGetFollowerUpdatedAtLogic(ctx, s.svcCtx)
	return l.GetFollowerUpdatedAt(in)
}

// -----------------------Fork-----------------------
func (s *RelationServer) AddFork(ctx context.Context, in *relation_relation.AddForkReq) (*relation_relation.AddForkResp, error) {
	l := logic.NewAddForkLogic(ctx, s.svcCtx)
	return l.AddFork(in)
}

func (s *RelationServer) DelFork(ctx context.Context, in *relation_relation.DelForkReq) (*relation_relation.DelForkResp, error) {
	l := logic.NewDelForkLogic(ctx, s.svcCtx)
	return l.DelFork(in)
}

func (s *RelationServer) DelAllFork(ctx context.Context, in *relation_relation.DelAllForkReq) (*relation_relation.DelAllForkResp, error) {
	l := logic.NewDelAllForkLogic(ctx, s.svcCtx)
	return l.DelAllFork(in)
}

func (s *RelationServer) GetOrigin(ctx context.Context, in *relation_relation.GetOriginReq) (*relation_relation.GetOriginResp, error) {
	l := logic.NewGetOriginLogic(ctx, s.svcCtx)
	return l.GetOrigin(in)
}

func (s *RelationServer) SearchFork(ctx context.Context, in *relation_relation.SearchForkReq) (*relation_relation.SearchForkResp, error) {
	l := logic.NewSearchForkLogic(ctx, s.svcCtx)
	return l.SearchFork(in)
}

func (s *RelationServer) UpdateFork(ctx context.Context, in *relation_relation.UpdateForkReq) (*relation_relation.UpdateForkResp, error) {
	l := logic.NewUpdateForkLogic(ctx, s.svcCtx)
	return l.UpdateFork(in)
}

func (s *RelationServer) GetForkUpdatedAt(ctx context.Context, in *relation_relation.GetForkUpdatedAtReq) (*relation_relation.GetForkUpdatedAtResp, error) {
	l := logic.NewGetForkUpdatedAtLogic(ctx, s.svcCtx)
	return l.GetForkUpdatedAt(in)
}

// -----------------------Star-----------------------
func (s *RelationServer) AddStar(ctx context.Context, in *relation_relation.AddStarReq) (*relation_relation.AddStarResp, error) {
	l := logic.NewAddStarLogic(ctx, s.svcCtx)
	return l.AddStar(in)
}

func (s *RelationServer) DelStar(ctx context.Context, in *relation_relation.DelStarReq) (*relation_relation.DelStarResp, error) {
	l := logic.NewDelStarLogic(ctx, s.svcCtx)
	return l.DelStar(in)
}

func (s *RelationServer) DelAllStarredRepo(ctx context.Context, in *relation_relation.DelAllStarredRepoReq) (*relation_relation.DelAllStarredRepoResp, error) {
	l := logic.NewDelAllStarredRepoLogic(ctx, s.svcCtx)
	return l.DelAllStarredRepo(in)
}

func (s *RelationServer) DelAllStaringDev(ctx context.Context, in *relation_relation.DelAllStaringDevReq) (*relation_relation.DelAllStaringDevResp, error) {
	l := logic.NewDelAllStaringDevLogic(ctx, s.svcCtx)
	return l.DelAllStaringDev(in)
}

func (s *RelationServer) CheckIfStar(ctx context.Context, in *relation_relation.CheckIfStarReq) (*relation_relation.CheckIfStarResp, error) {
	l := logic.NewCheckIfStarLogic(ctx, s.svcCtx)
	return l.CheckIfStar(in)
}

func (s *RelationServer) SearchStarredRepo(ctx context.Context, in *relation_relation.SearchStarredRepoReq) (*relation_relation.SearchStarredRepoResp, error) {
	l := logic.NewSearchStarredRepoLogic(ctx, s.svcCtx)
	return l.SearchStarredRepo(in)
}

func (s *RelationServer) SearchStaringDev(ctx context.Context, in *relation_relation.SearchStaringDevReq) (*relation_relation.SearchStaringDevResp, error) {
	l := logic.NewSearchStaringDevLogic(ctx, s.svcCtx)
	return l.SearchStaringDev(in)
}

func (s *RelationServer) UpdateStarredRepo(ctx context.Context, in *relation_relation.UpdateStarredRepoReq) (*relation_relation.UpdateStarredRepoResp, error) {
	l := logic.NewUpdateStarredRepoLogic(ctx, s.svcCtx)
	return l.UpdateStarredRepo(in)
}

func (s *RelationServer) GetStarredRepoUpdatedAt(ctx context.Context, in *relation_relation.GetStarredRepoUpdatedAtReq) (*relation_relation.GetStarredRepoUpdatedAtResp, error) {
	l := logic.NewGetStarredRepoUpdatedAtLogic(ctx, s.svcCtx)
	return l.GetStarredRepoUpdatedAt(in)
}
